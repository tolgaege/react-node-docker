/** Declaration file generated by dts-gen */

export class gist {
    constructor(client: any);

    check(id: any, cb: any): any;

    comment(cbOrIdOrCmnt: any, cbOrCmnt: any, cb: any): any;

    comments(id: any, cbOrCmnt: any, cb: any): any;

    create(gist: any, cb: any): any;

    createComment(id: any, comment: any, cb: any): any;

    delete(id: any, cb: any): any;

    deleteComment(id: any, cb: any): any;

    edit(id: any, gist: any, cb: any): any;

    fork(id: any): any;

    get(id: any, cb: any): any;

    getComment(id: any, cb: any): any;

    list(...args: any[]): any;

    listComments(id: any, cb: any): any;

    public(...args: any[]): any;

    star(id: any, cb: any): any;

    starred(...args: any[]): any;

    unstar(id: any, cb: any): any;

    updateComment(id: any, comment: any, cb: any): any;

    user(...args: any[]): any;

}

export class issue {
    constructor(repo: any, number: any, client: any);

    addLabels(labels: any, cb: any): any;

    comments(...args: any[]): any;

    createComment(comment: any, cb: any): any;

    deleteComment(id: any, cb: any): any;

    events(...args: any[]): any;

    info(cb: any): any;

    labels(cb: any): any;

    removeAllLabels(cb: any): any;

    removeLabel(label: any, cb: any): any;

    replaceAllLabels(labels: any, cb: any): any;

    update(obj: any, cb: any): any;

    updateComment(id: any, comment: any, cb: any): any;

}

export class label {
    constructor(repo: any, name: any, client: any);

    delete(cb: any): any;

    info(cb: any): any;

    update(obj: any, cb: any): any;

}

export class me {
    constructor(client: any);

    checkFollowing(user: any, cb: any): any;

    checkStarred(repo: any, cb: any): any;

    checkWatching(repo: any, cb: any): any;

    createKey(key: any, cb: any): any;

    createRepo(repo: any, cb: any): any;

    deleteEmails(emails: any, cb: any): any;

    deleteKey(id: any, cb: any): any;

    emails(cbOrEmails: any, cb: any): any;

    emailsDetailed(cb: any): any;

    follow(user: any, cb: any): any;

    followers(...args: any[]): any;

    following(cbOrUser: any, cb: any): any;

    fork(repo: any, cb: any): any;

    getKey(id: any, cb: any): any;

    info(cb: any): any;

    issues(...args: any[]): any;

    keys(cbOrIdOrKey: any, cbOrKey: any, cb: any): any;

    notifications(options: any, cb: any): any;

    org(name: any): any;

    orgs(...args: any[]): any;

    pr(repo: any, number: any): any;

    profile(data: any): any;

    repo(nameOrRepo: any, cb: any): any;

    repos(...args: any[]): any;

    setEmails(emails: any, cb: any): any;

    star(repo: any, cb: any): any;

    starred(...args: any[]): any;

    subscribe(repo: any, cb: any): any;

    teams(...args: any[]): any;

    unfollow(user: any, cb: any): any;

    unstar(repo: any, cb: any): any;

    unsubscribe(repo: any, cb: any): any;

    update(info: any, cb: any): any;

    updateKey(id: any, key: any, cb: any): any;

    updateMembership(org: any, state: any, cb: any): any;

    watched(...args: any[]): any;

}

export class milestone {
    constructor(repo: any, number: any, client: any);

    delete(cb: any): any;

    info(cb: any): any;

    update(obj: any, cb: any): any;

}

export class org {
    constructor(name: any, client: any);

    addMember(user: any, options: any, cb: any): any;

    addTeamRepo(team: any, repo: any, cbOrOptions: any, cb: any): any;

    concealMembership(user: any, cb: any): any;

    createRepo(repo: any, cb: any): any;

    createTeam(options: any, cb: any): any;

    deleteHook(id: any, cb: any): any;

    hook(hook: any, cb: any): any;

    hooks(...args: any[]): any;

    info(cb: any): any;

    member(user: any, cb: any): any;

    members(...args: any[]): any;

    membership(user: any, cb: any): any;

    publicMember(user: any, cb: any): any;

    publicizeMembership(user: any, cb: any): any;

    removeMember(user: any, cb: any): any;

    repo(nameOrRepo: any, cb: any): any;

    repos(...args: any[]): any;

    teams(...args: any[]): any;

    update(info: any, cb: any): any;

}

export class pr {
    constructor(repo: any, number: any, client: any);

    close(cb: any): any;

    comments(...args: any[]): any;

    commits(cb: any): any;

    createComment(comment: any, cb: any): any;

    createReview(reviewBody: any, cb: any): any;

    createReviewRequests(usernames: any, cb: any): any;

    dismissReview(id: any, dismissalMessage: any, cb: any): any;

    files(cb: any): any;

    info(cb: any): any;

    merge(msg: any, cb: any): any;

    merged(cb: any): any;

    removeComment(id: any, cb: any): any;

    removeReview(id: any, cb: any): any;

    removeReviewRequests(usernames: any, cb: any): any;

    review(id: any, cb: any): any;

    reviewComments(id: any, cb: any): any;

    reviewRequests(cb: any): any;

    reviews(cb: any): any;

    submitReview(id: any, reviewBody: any, cb: any): any;

    update(obj: any, cb: any): any;

}

export class project {
    constructor(repo: any, number: any, client: any);

    delete(cb: any): any;

    info(cb: any): any;

    update(obj: any, cb: any): any;

}

export class release {
    constructor(repo: any, number: any, client: any);

    info(cb: any): any;

    uploadAssets(file: any, optionsOrCb: any, cb: any): any;

}

export class repo {
    constructor(name: any, client: any);

    addCollaborator(user: any, cbOrOptions: any, cb: any): any;

    archive(format: any, cbOrRef: any, cb: any): any;

    blob(sha: any, cb: any): any;

    branch(branch: any, cb: any): any;

    branches(...args: any[]): any;

    collaborators(cbParamOrUser: any, cb: any): any;

    combinedStatus(ref: any, cb: any): any;

    commit(sha: any, cb: any): any;

    commits(...args: any[]): any;

    compare(base: any, head: any, cb: any): any;

    contents(path: any, cbOrRef: any, cb: any): any;

    contributors(...args: any[]): any;

    contributorsStats(cb: any): any;

    createBlob(content: any, encoding: any, cb: any): any;

    createCommit(message: any, tree: any, parents: any, cbOrOptions: any, cb: any): any;

    createContents(path: any, message: any, content: any, cbOrBranchOrOptions: any, cb: any): any;

    createIssue(issue: any, cb: any): any;

    createLabel(label: any, cb: any): any;

    createMilestone(milestone: any, cb: any): any;

    createPr(pr: any, cb: any): any;

    createProject(project: any, cb: any): any;

    createRef(ref: any, sha: any, cb: any): any;

    createReference(ref: any, sha: any, cb: any): any;

    createRelease(release: any, cb: any): any;

    createTree(tree: any, cbOrBase: any, cb: any): any;

    deleteContents(path: any, message: any, sha: any, cbOrBranch: any, cb: any): any;

    deleteHook(id: any, cb: any): any;

    deleteRef(ref: any, cb: any): any;

    destroy(cb: any): any;

    forks(...args: any[]): any;

    hasCollaborator(user: any, cb: any): any;

    hook(hook: any, cb: any): any;

    hooks(...args: any[]): any;

    info(cb: any): any;

    issue(numberOrIssue: any, cb: any): any;

    issues(...args: any[]): any;

    label(nameOrLabel: any, cb: any): any;

    labels(...args: any[]): any;

    languages(cb: any): any;

    merge(obj: any, cb: any): any;

    milestone(numberOrMilestone: any, cb: any): any;

    milestones(...args: any[]): any;

    pr(numberOrPr: any, cb: any): any;

    project(numberOrProject: any, cb: any): any;

    projects(...args: any[]): any;

    prs(...args: any[]): any;

    readme(cbOrRef: any, cb: any): any;

    ref(ref: any, cb: any): any;

    release(numberOrRelease: any, cb: any): any;

    releaseByTag(tag: any, cb: any): any;

    releases(cb: any): any;

    removeCollaborator(user: any, cb: any): any;

    stargazers(...args: any[]): any;

    status(sha: any, obj: any, cb: any): any;

    statuses(ref: any, cb: any): any;

    tags(cb: any): any;

    teams(cb: any): any;

    tree(sha: any, cbOrRecursive: any, cb: any): any;

    update(info: any, cb: any): any;

    updateContents(path: any, message: any, content: any, sha: any, cbOrBranchOrOptions: any, cb: any): any;

    updateRef(ref: any, sha: any, cb: any): any;

}

export class search {
    constructor(client: any);

    code(params: any, cb: any): any;

    issues(params: any, cb: any): any;

    repos(params: any, cb: any): any;

    users(params: any, cb: any): any;

}

export class team {
    constructor(id: any, client: any);

    addMembership(user: any, cbOrOptions: any, cb: any): any;

    addRepo(repo: any, cbOrOptions: any, cb: any): any;

    addUser(user: any, cb: any): any;

    destroy(cb: any): any;

    getMembership(user: any, cb: any): any;

    info(cb: any): any;

    member(user: any, cb: any): any;

    members(...args: any[]): any;

    membership(user: any, cb: any): any;

    removeMembership(user: any, cb: any): any;

    removeRepo(repo: any, cb: any): any;

    removeUser(user: any, cb: any): any;

    repos(...args: any[]): any;

    update(info: any, cb: any): any;

}

export class user {
    constructor(login: any, client: any);

    events(...args: any[]): any;

    followers(...args: any[]): any;

    following(...args: any[]): any;

    info(cb: any): any;

    orgs(...args: any[]): any;

    profile(data: any): any;

    repos(...args: any[]): any;

}

export function client(...args: any[]): any;

export namespace auth {
    const modes: {
        cli: number;
        web: number;
    };

    function config(options: any): any;

    function login(scopes: any, callback: any): any;

    function revoke(id: any, callback: any): any;

}